-- some recursion examples

-- fibonacci number
function fibo(x:int) :int = if x < 2 then 1 else fibo(x-1)+fibo(x-2)

-- unite-and-conquer (exclusive) scan
-- only for a sequence with length of power of 2
function uc_scan(v:{int}) : {int} =
    let is = scanExPlus({1 : x in v});
        odds = concat({{x|not(i%2==0)} :  i in is, x in v});
	evens = concat({{x|i%2 == 0} : i in is, x in v})
    in if empty(odds) then {0} else
        let ps = {x+y : x in odds, y in evens}
        in concat({{s,s+x} : s in uc_scan(ps), x in evens}) 


-- unite-and-conquer (inclusive) scan
-- only for a sequence with length of power of 2
function inscan(v:{int}) : {int} =
    let is = scanExPlus({1 : x in v});
        odds = concat({{x|not(i%2==0)} :  i in is, x in v});
	evens = concat({{x|i%2 == 0} : i in is, x in v})
    in if empty(odds) then evens else
       let ps = {x+y : x in odds, y in evens}
       in concat({{s-x,s} : s in inscan(ps), x in odds})
